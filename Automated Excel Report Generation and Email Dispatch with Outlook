"""
File name: Automated Excel Report Generation and Email Dispatch with Outlook
Author: Andy Lin
"""

import os
import win32com.client as client
import win32file as file
from openpyxl import Workbook, load_workbook


"""
Input formatted date to get the file for the corresponding name,
and enter a command for the next step.

Input: 
    date: the given date will be the search index for the file name 
    command: Including creating a new folder, creating a new sheet, and sending email.
            step1: Generate report
            step2: Send email

Output:
    A locked Excel file
    An Outlook email script
"""

read_file_path = "\\\C:\Desktop\\filepath1"                      # The file path of the Excel need to be read
report_folder_path = "\\\C:\Desktop\\filepath1"                  # The file path of the Excel need to be reported
mail_recipients = ['123456@gmail.com', '123456@yahoo.com.tw']
mail_cc = ['123456@gmail.com', '123456@yahoo.com.tw']
password = 'password'                                            # password for Excel file



"""
1. Use while True loop to keep entering in command terms.
2. Enter "Step1" to generate a locked Excel file for mail attachment.
3. The generated Excel file is derived from a specific Excel file with specific columns filtered in different values.
4. Enter "Step2" to make an Outlook script with the generated Excel as an attachment.
"""


def main():
    attachment_path = None
    while True:
        command = input("Enter your command:")
        if command == "step1":
            print("generate report")
            date_folder_path = new_folder(report_folder_path)
            attachment_path = new_sheet(read_file_path, date_folder_path)
            encrypt_excel_file(attachment_path, password)
            print("report generated")
        elif command == 'step2':
            if not attachment_path:
                attachment_path = new_sheet(read_file_path, report_folder_path)
            send_mail(attachment_path)
        elif command == 'end':
            break


def new_folder(report_folder_path):
    date = input('Enter Date: MMDD: -->')
    # Assign file path
    path = os.path.join(report_folder_path)
    date_folder_path = os.path.join(path, date)
    # Create a new folder and named by date
    os.makedirs(date_folder_path)
    print(date_folder_path)
    return date_folder_path


def new_sheet(read_file_path, date_folder_path):

    # read file from "target_file_path"
    date_range = input('Date range: YYYYMMDD-YYYYMMDD-->: ')
    read_file_name = f"file_{date_range}_to_send.xlsx"
    wb_A = load_workbook(f"{read_file_path}/{read_file_name}")
    ws_A = wb_A.active

    # Create new Excel file
    wb_B = Workbook()
    ws_B = wb_B.active
    ws_B.title = "checking list"

    # Create heads
    ws_B.append(["No.", "Project Name", "recipients", "zipcode", "address", "numbers of package", "sender", "sender address", "Note"])

    # Read and process data with filtered terms
    transfer_cases = []  # List for saving “transfer case”
    self_managed_cases = []  # List for saving “self-managed case”
    for i in range(2, ws_A.max_row + 1):
        row_data = []
        if ws_A.cell(row=i, column=2).value == "transfer case":
            row_data = [
                "",  # No. will be added later
                f"Warm Service({ws_A.cell(row=i, column=5).value}{ws_A.cell(row=i, column=24).value})",
                ws_A.cell(row=i, column=12).value,
                ws_A.cell(row=i, column=14).value,
                ws_A.cell(row=i, column=15).value,
                "1",  # numbers of package
                "XOXO company",
                "XOXO company's address",
                "<<FRAGILE>>"
            ]
            transfer_cases.append(row_data)
        else:
            row_data = [
                "",
                "Warm Service",
                ws_A.cell(row=i, column=16).value,
                ws_A.cell(row=i, column=18).value,
                ws_A.cell(row=i, column=19).value,
                "1",
                "XOXO company",
                "XOXO company's address",
                "<<FRAGILE>>"
            ]
            self_managed_cases.append(row_data)

    # Add No. in column 1
    for index, row in enumerate(transfer_cases + self_managed_cases, start=1):
        row[0] = index  # Add series number
        ws_B.append(row)

    # file save and protection with password
    save_file_name = f"check list{date_range}.xlsx"
    attachment_path = os.path.join(date_folder_path, save_file_name)
    print(attachment_path)
    wb_B.save(attachment_path)
    
    return attachment_path


def encrypt_excel_file(attachment_path, password):
    excel_app = client.gencache.EnsureDispatch('Excel.Application')
    workbook = excel_app.Workbooks.Open(attachment_path)
    workbook.Password = password
    workbook.Save()
    workbook.Close()
    excel_app.Quit()


def send_mail(attachment_path):
    outlook  = client.Dispatch("Outlook.Application")
    message = outlook.CreateItem(0)
    message.display()
    message.To = "; ".join(mail_recipients)
    message.CC = "; ".join(mail_cc)
    message.BCC = '123456@gmail.com'
    message.Subject = 'Testing mail-sending automation'
    message.Body = 'Dera recipient:\n Please check the attachments, please let me know if you have any problem!\nHave a nice day'
    if attachment_path:
        message.Attachments.Add(attachment_path)
    message.Save()
    # message.Send()


if __name__ == '__main__':
    main()
